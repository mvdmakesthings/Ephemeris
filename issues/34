## Description

To improve onboarding and AI-assistant context, introduce a top-level `LLM.txt` file in the repository root. This file will describe the purpose, architecture, and usage intent of Ephemeris in concise natural language so that large language models (LLMs) and code-completion tools can better interpret the project's functionality.

---

## Motivation

Modern LLM-based coding tools benefit from lightweight natural-language context that supplements docstrings and READMEs. An `LLM.txt` file serves as a "project orientation" documentâ€”explaining why the repo exists, the intended APIs, and high-level design goals without the noise of build or dependency details.

This improves:
- **Context retention** when using ChatGPT, Claude, or Copilot-style tools
- **Auto-documentation** and prompt-based search accuracy
- **Future contributor comprehension** of project intent and boundaries

---

## Proposed Content Outline

`LLM.txt` should include:

### 1. Purpose & Scope
Short summary of Ephemeris as a Swift orbital mechanics toolkit for TLE propagation, observer geometry, and pass prediction.

### 2. Key Components
Overview of core types: `TwoLineElement`, `Orbit`, `Observer`, and `PassWindow`.

### 3. Design Philosophy
Emphasis on correctness, readability, and pure Swift implementation without external binaries.

### 4. Intended Use
For educational tools, ground-station planners, AR sky-apps, and AI-integrated astronomy assistants.

### 5. Future Roadmap (Optional)
Mention upcoming features such as AOS/LOS prediction, visibility estimation, and SwiftUI demos.

---

## Example Structure

```
Ephemeris: Swift Satellite Tracking Framework

Purpose: Ephemeris is a pure Swift framework for satellite orbital mechanics and tracking.

Core Components:
- TwoLineElement: Parses NORAD TLE format satellite data
- Orbit: Represents orbital parameters and calculates positions
- Observer: Ground station location and visibility calculations
- PassWindow: Predicts satellite pass times and geometry

Design: Focuses on correctness, academic reference accuracy, and Swift-native implementation.

Use Cases: Educational astronomy tools, ground station planning, AR sky visualization, AI astronomy assistants.

Not Intended For: Real-time mission-critical operations, highly specialized propagators beyond SGP4.
```

---

## Acceptance Criteria

- [ ] `LLM.txt` file created in repo root
- [ ] Written in plain English (not Markdown or code comments)
- [ ] Includes concise high-level explanation of what Ephemeris is and what it isn't
- [ ] Linked from the README under a new section: "For AI tools and developers"

---

## Related Issues

- Related to `.github/copilot-instructions.md` (PR #31)
- Complements existing documentation strategy