# Ephemeris

> Pure Swift framework for satellite orbital mechanics and tracking. Parses NORAD Two-Line Element (TLE) data and calculates orbital positions, velocities, and observer-relative parameters using Keplerian orbital mechanics. Implements coordinate transformations, pass prediction, and visualization support for Earth-orbiting satellites.

## Overview

Ephemeris enables developers to track satellites by parsing TLE data and computing orbital positions at any given time. The framework provides position calculations (latitude, longitude, altitude), observer-relative coordinates (azimuth, elevation, range), satellite pass predictions (AOS/LOS/max elevation), and visualization paths (ground tracks and sky tracks).

**Language**: Swift 6.0
**Platforms**: iOS 16+, macOS 13+
**Dependencies**: None (pure Swift implementation)
**Geodetic Standard**: WGS-84

## Core Types

**TwoLineElement**: Parses and validates NORAD Two-Line Element format satellite data with checksum verification. Extracts orbital elements including epoch time, mean motion, eccentricity, inclination, RAAN, argument of perigee, and mean anomaly.

**Orbit**: Represents satellite orbital path using six classical Keplerian elements. Calculates positions by solving Kepler's equation using Newton-Raphson iteration. Conforms to `Orbitable` protocol.

**Observer**: Represents ground station or observer location on Earth with latitude, longitude, and altitude (WGS-84). Used for topocentric calculations and pass predictions.

**Topocentric**: Observer-relative satellite coordinates including azimuth (degrees), elevation (degrees), range (km), and range rate (km/s). Used for antenna pointing and visibility determination.

**PassWindow**: Complete satellite pass event with acquisition of signal (AOS), maximum elevation point, and loss of signal (LOS). Includes calculated duration.

**CoordinateTransforms**: Utility for coordinate system conversions: ECI ↔ ECEF ↔ Geodetic ↔ ENU ↔ Horizontal. Includes atmospheric refraction correction.

## Key Features

- TLE parsing with 2-digit year interpretation (±50 year window) and checksum validation
- Orbital position calculation using Keplerian elements
- True/eccentric anomaly calculation from mean anomaly
- Semi-major axis derivation from mean motion (Kepler's Third Law)
- Topocentric coordinate calculations (azimuth, elevation, range, range rate)
- Satellite pass prediction with AOS/LOS bisection refinement (1-second accuracy)
- Maximum elevation finding using golden-section search
- Ground track generation (sub-satellite point path over Earth)
- Sky track generation (path across observer's sky in azimuth/elevation)
- Atmospheric refraction correction using Bennett formula
- Greenwich Mean Sidereal Time (GMST) calculations for Earth rotation
- Julian Day Number conversions and J2000 epoch transformations

## Physical Constants

Uses WGS-84 values:
- Earth gravitational parameter (µ): 398,600.4418 km³/s²
- Earth mean radius: 6,371.0 km
- Earth equatorial radius: 6,378.137 km
- Earth polar radius: 6,356.752 km

## Limitations

**Not suitable for:**
- Mission-critical operations: Does not implement SGP4/SDP4 atmospheric drag models. Accuracy degrades beyond several days from TLE epoch.
- Deep-space trajectories: Only Earth-orbiting satellites supported. No interplanetary, lunar, or non-Earth-centric orbits.
- Specialized orbit types: Advanced perturbation models (lunar/solar perturbations, station-keeping) not implemented.
- Professional operations: Educational/hobbyist software without formal verification or certification.

**Propagation method:** Keplerian orbital mechanics (two-body problem). Does not account for atmospheric drag, solar radiation pressure, or gravitational perturbations from Sun/Moon.

## Use Cases

- Educational astronomy tools and orbital mechanics demonstrations
- Ground station planning for hobbyist satellite tracking
- Augmented reality sky visualization with real-time satellite overlays
- Amateur radio satellite tracking applications
- AI astronomy assistants answering satellite position queries

## Documentation

- [Introduction to Orbital Elements](docs/Introduction-to-Orbital-Elements.md): Comprehensive guide to Keplerian orbital elements, TLE format explanation, mean vs. eccentric vs. true anomaly, and practical prediction accuracy considerations
- [Observer Geometry](docs/observer_geometry.md): Coordinate transformation theory, topocentric calculations, pass prediction algorithms, and observer geometry fundamentals
- [Visualization](docs/visualization.md): Ground track mathematics (sub-satellite point), sky track calculations (azimuth/elevation paths), and LaTeX formulas for visualization

## Reference

- [API Reference](docs/API-Reference.md): Complete API documentation with type signatures and method descriptions for all public types
- [README](README.md): Quick start guide, installation instructions, usage examples, and TLE data sources

## Testing

Framework includes comprehensive test suite (1,950 lines) using Spectre BDD framework:
- TLE parsing and validation tests
- Orbital element calculation tests
- Position and pass prediction tests
- Coordinate transformation tests
- Ground track and sky track generation tests

Run tests: `swift run EphemerisTests`

## Package Information

Swift Package Manager compatible. Add to Package.swift:

```swift
dependencies: [
    .package(url: "https://github.com/mvdmakesthings/Ephemeris.git", from: "1.0.0")
]
```

## Implementation Notes

- Pure Swift with no C/C++ dependencies
- All calculations based on peer-reviewed academic papers and NASA documentation
- Source references included in code comments
- Follows Apple Swift API Design Guidelines
- Comprehensive inline documentation
- SwiftLint enforced for code style consistency
